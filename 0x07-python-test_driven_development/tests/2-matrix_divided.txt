Test cases for 2-matrix_divided module.
====================================

The module divides all elements of a matrix.

===================================================
The following are the usage examples;
=====================================

Importing function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test case with a 2x3 matrix and div=2:
        >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
        [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

Test case with a 2x2 matrix and div=5:
	>>> matrix_divided([[10, 20], [30, 40]], 5)
	[[2.0, 4.0], [6.0, 8.0]]

Test case with a 3x2 matrix and div=3:
	>>> matrix_divided([[1, 2], [3, 4], [5, 6]], 3)
	[[0.33, 0.67], [1.0, 1.33], [1.67, 2.0]]

Test case with a 2x2 matrix and div=0:
	>>> matrix_divided([[1, 2], [3, 4]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

Test case with a 2x2 matrix (one element is string) and div=2:
	>>> matrix_divided([[1, 2], [3, '4']], 2)
	Traceback (most recent call last):
        ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test case with a 3x2 matrix (one row has different size) and div=2:
	>>> matrix_divided([[1, 2], [3, 4], [5, 6, 7]], 2)
	Traceback (most recent call last):
        ...
	TypeError: Each row of the matrix must have the same size

Test case with a 2x2 matrix and div='divisor':
	>>> matrix_divided([[1, 2], [3, 4]], 'divisor')
	Traceback (most recent call last):
        ...
	TypeError: div must be a number
